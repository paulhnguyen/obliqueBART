summary(dif)
dif2 <- (aa_vs_obl_table_wide2[,"pbart"] - aa_vs_obl_table_wide2[,"obart7"])
summary(dif2)
dif2 < .0167
sum(dif2 < .0167)
# now lets look at other aa vs obl
rot_aa_vs_obl_dir = "../rotate_aa_vs_obl_bakeoff/rot_aa_vs_obl_class_results/"
# gets names of all the files in dir
rot_aa_vs_obl_files = stringr::str_c(rot_aa_vs_obl_dir, list.files(rot_aa_vs_obl_dir), sep = "")
# loads results
rot_aa_vs_obl_results = lapply(rot_aa_vs_obl_files, loadRData) %>% bind_rows()
m = c(
"rot_extra_trees",
"rot_rand_forest",
"rot_pbart",
"rot_xgboost",
"obart1.5a",
"rotation_forest"
)
# check how many of each model we have
n_check = rot_aa_vs_obl_results %>%
distinct() %>%
filter(model %in% m) %>%
group_by(model, data) %>%
summarize(n = n()) %>%
pivot_wider(
names_from = data,
values_from = n
)
results$num_rota <- 1
total_results <- rbind(results,
rot_aa_vs_obl_results  %>%
dplyr::select(1:18)) %>%
filter(!(model %in% c("obart1.5a", "obart1.5a_oh")))
rot_aa_vs_obl_table <- total_results %>%
group_by(data, model, num_rota) %>%
summarize(
mean_accuracy_test = mean(accuracy_test),
mean_train_time = mean(mean_train_time),
)  %>%
group_by(model, data) %>%
summarize(max_mean_accuracy_test = max(mean_accuracy_test))
rot_aa_vs_obl_table %>%
ggplot(mapping = aes(x = model,
y = max_mean_accuracy_test,
fill = model)) +
geom_boxplot() +
theme(legend.position="none") +
theme(axis.text.x=element_text(angle = -45, hjust = 0))
rot_aa_vs_obl_table_wide <- rot_aa_vs_obl_table %>%
filter(data != "thoraric_surgery") %>%
group_by(data) %>%
mutate(max_accuracy = max(max_mean_accuracy_test),
mean_accuracy_test_round = signif(max_mean_accuracy_test, 3)) %>%
mutate(mean_accuracy_test_round = cell_spec(mean_accuracy_test_round,
format = "latex",
bold = max_mean_accuracy_test == max_accuracy)) %>%
select(-max_accuracy, -max_mean_accuracy_test) %>%
pivot_wider(names_from = model,
values_from = mean_accuracy_test_round)
rot_aa_vs_obl_table_wide
rot_aa_vs_obl_table_wide$data <- c("ILPD",
"banknote",
"blood transfusion",
"breast cancer diag.",
"breast cancer",
"breast cancer prog.",
"climate crashes",
"connectionist sonar",
"credit approval",
"echocardiogram",
"fertility",
"hepatitis",
"ionosphere",
"ozone 1",
"ozone 8",
"parkinsons",
"planning relax",
"qsar biodegradable",
"seismic bumps",
"spambase",
"spectf heart",
"statlog german cred.")
rot_aa_vs_obl_table_wide
rot_aa_vs_obl_dir = "../rotate_aa_vs_obl_bakeoff/rot_aa_vs_obl_class_results/"
# gets names of all the files in dir
rot_aa_vs_obl_files = stringr::str_c(rot_aa_vs_obl_dir, list.files(rot_aa_vs_obl_dir), sep = "")
# loads results
rot_aa_vs_obl_results = lapply(rot_aa_vs_obl_files, loadRData) %>% bind_rows()
rot_aa_vs_obl_results <- rot_aa_vs_obl_results %>%
dplyr::select(job_id, num_rota, model, data, split, accuracy_test, mean_train_time)
results$num_rota <- 1
rot_aa_vs_obl_total_results <- rbind(results %>%
select(job_id, num_rota, model, data, split, accuracy_test, mean_train_time), rot_aa_vs_obl_results)
rot_aa_vs_obl_total_results <- rot_aa_vs_obl_total_results  %>%
filter(!(model %in% c("obart7oh",
"obart1.5a")),
data != "thoraric_surgery")
get_t_results_rot <- function(base_results, total_results, num_rotation, model_name, dataset){
model_results_vec <- total_results %>%
filter(model == model_name,
data == dataset,
num_rota == num_rotation) %>%
select(accuracy_test) %>%
pull()
if (length(model_results_vec) == 0) {
return(NA)
}
else{
base_results_vec <- base_results %>%
filter(model == "obart7",
data == dataset) %>%
select(accuracy_test) %>%
pull()
if (length(model_results_vec) == length(base_results_vec)) {
test_results <- t.test(model_results_vec, base_results_vec,
alternative = "two.sided",
paired = T)
} else{
test_results <- t.test(model_results_vec, base_results_vec,
alternative = "two.sided",
paired = F) # some missing results for pbart 200 num rota
}
pval <- test_results$p.value
return((!is.na(pval)) & (pval < .05))
}
}
count_df <- rot_aa_vs_obl_total_results %>%
count(model, data, num_rota)
t_test_obl_vs_obl <- expand.grid(num_rota = unique(rot_aa_vs_obl_total_results$num_rota),
data = unique(rot_aa_vs_obl_total_results$data),
model = unique(rot_aa_vs_obl_total_results$model)) %>%
filter(!((model == "obart7") & (num_rota!=1)),
data != "thoraric_surgery")
t_test_obl_vs_obl$ttest = NA
for (i in 1:nrow(t_test_obl_vs_obl)) {
t_test_obl_vs_obl$ttest[i] <- get_t_results_rot(base_results,
rot_aa_vs_obl_total_results,
num_rotation = t_test_obl_vs_obl$num_rota[i],
model_name = t_test_obl_vs_obl$model[i],
dataset = t_test_obl_vs_obl$data[i])
}
######### code for t tests.
#give it results and base results
# loads .RData object
loadRData <- function(filename) {
load(filename)
get(ls()[ls() != "filename"])
}
# gets names of all the files in dir
files = stringr::str_c(dir, list.files(dir), sep = "")
# loads results
results = lapply(files, loadRData) %>% bind_rows() %>% filter(model == "obart7")
# model index
m = c(
"obart7", "obart7oh"
)
# check how many of each model we have
n_check = results %>%
distinct() %>%
filter(model %in% m) %>%
group_by(model, data) %>%
summarize(n = n()) %>%
pivot_wider(
names_from = data,
values_from = n
)
# now lets look at other priors
prior_dir = "../oblique_priors_bakeoff/class_prior_results/"
# gets names of all the files in dir
prior_files = stringr::str_c(prior_dir, list.files(prior_dir), sep = "")
# loads results
prior_results = lapply(prior_files, loadRData) %>% bind_rows()
prior_total_results <- rbind(results, prior_results[,1:ncol(results)]) %>%
filter(data != "thoraric_surgery")
write_csv(prior_total_results, "../results/prior_total_results_class.csv")
base_results <- prior_total_results %>%
filter(model == "obart7")
count_df <- rot_aa_vs_obl_total_results %>%
count(model, data, num_rota)
t_test_obl_vs_obl <- expand.grid(num_rota = unique(rot_aa_vs_obl_total_results$num_rota),
data = unique(rot_aa_vs_obl_total_results$data),
model = unique(rot_aa_vs_obl_total_results$model)) %>%
filter(!((model == "obart7") & (num_rota!=1)),
data != "thoraric_surgery")
t_test_obl_vs_obl$ttest = NA
for (i in 1:nrow(t_test_obl_vs_obl)) {
t_test_obl_vs_obl$ttest[i] <- get_t_results_rot(base_results,
rot_aa_vs_obl_total_results,
num_rotation = t_test_obl_vs_obl$num_rota[i],
model_name = t_test_obl_vs_obl$model[i],
dataset = t_test_obl_vs_obl$data[i])
}
get_t_results_rot(base_results, rot_aa_vs_obl_total_results,
num_rotation = 1,
model_name = "rot_extra_trees",
data = "banknote_authentication")
# this table has the minimum number of rotations for the difference between obliqueBART and rotated ensemble is *not* statistically significant. ie minimum number of rotations for the results to be similar
t_test_obl_vs_obl_min <- t_test_obl_vs_obl %>%
filter(!ttest,
model!= "rotation_forest") %>%
group_by(data, model) %>%
summarize(min_num_rota = min(num_rota)) %>%
pivot_wider(names_from = model,
values_from = min_num_rota)
t_test_obl_vs_obl_min_table <- t_test_obl_vs_obl_min %>%
select(-obart7)
t_test_obl_vs_obl_min_table
t_test_obl_vs_obl_min_table$data <- c(
"banknote",
"blood transfusion",
"breast cancer diag.",
"breast cancer",
"breast cancer prog.",
"climate crashes",
"connectionist sonar",
"credit approval",
"echocardiogram",
"fertility",
"hepatitis",
"ILPD",
"ionosphere",
"ozone 1",
"ozone 8",
"parkinsons",
"planning relax",
"qsar biodegradable",
"seismic bumps",
"spambase",
"spectf heart",
"statlog german cred.")
t_test_obl_vs_obl_min_table
colnames(t_test_obl_vs_obl_min_table) <- c("data", "extraTrees.r", "pbart.r", "xgboost.r", "randomForest.r")
t_test_obl_vs_obl_min_table[c(12,1),] <- t_test_obl_vs_obl_min_table[c(1,12),]
t_test_obl_vs_obl_min_table
# Author: Ryan Yee
# Date: August 13, 2024
# Purpose: toy example settings
# Details:
# Dependencies:
# general factors
n_train = 1000 #c(100, 1000, 10000)
n_test = 1000
sigma = 1
delta = 4 # c(0.5, 1, 2, 4)
# rotation factors
theta = seq(0, pi / 4, length.out = 10)
# sinusoidal factors
amp = seq(0, 1, length.out = 10)
# tree size (obart only)
m = 200 # c(25, 50, 100, 200)
# number of features (random rotations only)
p = c(1, 4, 16, 50, 100, 200)
# replicates
r = 1:20
# oblique experiments
o_rot = expand.grid(
model = "obart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = theta
)
o_sin = expand.grid(
model = "obart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = amp
)
# axis-aligned experiments
a_rot = expand.grid(
model = "aabart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = theta
)
a_sin = expand.grid(
model = "aabart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = amp
)
# random rotation experiments
r_rot = expand.grid(
model = "rrbart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = p,
sigma = sigma,
delta = delta,
theta = theta
)
r_sin = expand.grid(
model = "rrbart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = p,
sigma = sigma,
delta = delta,
theta = amp
)
# wbart experiments
aw_rot = expand.grid(
model = "awbart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = theta
)
aw_sin = expand.grid(
model = "awbart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = amp
)
rw_rot = expand.grid(
model = "rwbart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = p,
sigma = sigma,
delta = delta,
theta = theta
)
rw_sin = expand.grid(
model = "rwbart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = p,
sigma = sigma,
delta = delta,
theta = amp
)
# settings
settings = rbind(o_rot, o_sin, a_rot, a_sin, r_rot, r_sin, aw_rot, aw_sin, rw_rot, rw_sin)
View(settings)
setwd("~/school/wisconsin/BART/packages/obliqueBART/examples/toy_examples")
get_wd()
getwd()
source("study/settings.R")
View(settings)
source("study/settings.R")
head(settings)
unique(settings$model)
# Author: Ryan Yee
# Date: August 13, 2024
# Purpose: toy example settings
# Details:
# Dependencies:
# general factors
n_train = 1000 #c(100, 1000, 10000)
n_test = 1000
sigma = 1
delta = 4 # c(0.5, 1, 2, 4)
# rotation factors
theta = seq(0, pi / 4, length.out = 10)
# sinusoidal factors
amp = seq(0, 1, length.out = 10)
# tree size (obart only)
m = 200 # c(25, 50, 100, 200)
# number of features (random rotations only)
p = c(1, 4, 16, 50, 100, 200)
# replicates
r = 1:20
# oblique experiments
o_rot = expand.grid(
model = "obart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = theta
)
o_sin = expand.grid(
model = "obart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = amp
)
o7_rot = expand.grid(
model = "obart7",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = theta
)
o7_sin = expand.grid(
model = "obart7",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = amp
)
# wbart experiments
aw_rot = expand.grid(
model = "awbart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = theta
)
aw_sin = expand.grid(
model = "awbart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = 0,
sigma = sigma,
delta = delta,
theta = amp
)
rw_rot = expand.grid(
model = "rwbart",
exp = "rot_axes",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = p,
sigma = sigma,
delta = delta,
theta = theta
)
rw_sin = expand.grid(
model = "rwbart",
exp = "sin",
rep = r,
n_train = n_train,
n_test = n_test,
m = m,
p = p,
sigma = sigma,
delta = delta,
theta = amp
)
# settings
settings = rbind(o7_rot, o7_sin,
aw_rot, aw_sin,
rw_rot, rw_sin)
