}
n = 2
x_seq <- seq(0, 1, by = .05)
x_seq <- seq(0, 1, by = .01)
data.frame(alpha = rep(5, 101),
beta = rep(2, 101),
x_seq = x_seq)
cdf_df <- data.frame(alpha = rep(5, 101),
beta = rep(2, 101),
x_seq = x_seq)
View(cdf_df)
library(tidyverse)
cdf_df <- data.frame(alpha = rep(5, 101),
beta = rep(2, 101),
x = x_seq)
View(cdf_df)
cdf_df <- data.frame(alpha = rep(5, 101),
beta = rep(2, 101),
x = x_seq) %>%
mutate(cdf2 <- beta_cdf_approx(x,2,alpha, beta))
cdf_df <- data.frame(alpha = rep(5, 101),
beta = rep(2, 101),
x = x_seq) %>%
mutate(cdf2 <- beta_cdf_approx(x,n = 2, alpha = 5, beta = 2))
x
beta_cdf_approx(x,n = 2, alpha = 5, beta = 2)
cdf_df <- data.frame(alpha = rep(5, 101),
beta = rep(2, 101),
x = x_seq) %>%
mutate(cdf2 = beta_cdf_approx(x,n = 2, alpha = 5, beta = 2))
cdf_df <- data.frame(alpha = rep(5, 101),
beta = rep(2, 101),
x = x_seq)
beta_cdf_approx
for (i in 1:nrow(cdf_df)) {
cdf_df$cdf2[i] <- beta_cdf_approx(cdf_df$x[i], n = 2,
alpha = 5, beta = 2)
cdf_df$cdf4[i] <- beta_cdf_approx(cdf_df$x[i], n = 4,
alpha = 5, beta = 2)
cdf_df$cdf8[i] <- beta_cdf_approx(cdf_df$x[i], n = 8,
alpha = 5, beta = 2)
cdf_df$cdf16[i] <- beta_cdf_approx(cdf_df$x[i], n = 16,
alpha = 5, beta = 2)
}
View(cdf_df)
for (i in 1:nrow(cdf_df)) {
cdf_df$cdf2[i] <- beta_cdf_approx(cdf_df$x[i], n = 2,
alpha = 5, beta = 2)
cdf_df$cdf4[i] <- beta_cdf_approx(cdf_df$x[i], n = 4,
alpha = 5, beta = 2)
cdf_df$cdf8[i] <- beta_cdf_approx(cdf_df$x[i], n = 8,
alpha = 5, beta = 2)
cdf_df$cdf16[i] <- beta_cdf_approx(cdf_df$x[i], n = 16,
alpha = 5, beta = 2)
cdf_df$pbeta <- pbeta(cdf_df$x[i], alpha, beta, lower.tail = T)
}
View(cdf_df)
pnorm(-1)
for (i in 1:nrow(cdf_df)) {
cdf_df$cdf2[i] <- beta_cdf_approx(cdf_df$x[i], n = 2,
alpha = 5, beta = 2)
cdf_df$cdf4[i] <- beta_cdf_approx(cdf_df$x[i], n = 4,
alpha = 5, beta = 2)
cdf_df$cdf8[i] <- beta_cdf_approx(cdf_df$x[i], n = 8,
alpha = 5, beta = 2)
cdf_df$cdf16[i] <- beta_cdf_approx(cdf_df$x[i], n = 16,
alpha = 5, beta = 2)
cdf_df$pbeta[i] <- pbeta(cdf_df$x[i], alpha, beta, lower.tail = T)
}
cdf_df_long <- cdf_df %>%
pivot_longer(cols = 4:8)
View(cdf_df_long)
ggplot(cdf_df_long, mapping = aes(x = x,
y = value,
color = name)) +
geom_point()
0^4
ggplot(cdf_df_long, mapping = aes(x = x,
y = value,
color = name)) +
geom_line()
x = 1
n = 4
c0 <- beta(alpha, beta)^-1
c0
cjs <- vector(length = n)
for (i in 1:n) {
cjs[i] <- get_cj(i, alpha, beta)
}
cjs
cs <- c(c0, cjs)
cs
probs <- vector(length = n + 1)
for (i in 1:(n+1)) {
probs[i] <- cs[i] * (x^(i-1 + alpha)) * (1-x)^beta
}
probs
i = 1
x^(i-1 + alpha)
(1-x)^beta
0^4
0^.2
1^5
(o^2)
0^2
.001^2
.99^5
inverse_func  <- function(x){
sol <- 0
if (x < 0) {
sol <- ((x + 1)^2) / 2
}
else {
sol <- (x + 1) * (-x - 1) / 2
}
return(sol)
}
inverse_func(0)
inverse_func(1)
1 + 1
(1 + 1) * (-1 - 1) / 2
.5 - 2 -(2)
.5 - 2 + 2
0^(1/3)
nsmap <- 10^4
xx <- numeric(nsamp)
nsmap <- 10^4
nsamp <- 10^4
xx <- numeric(nsamp)
set.seed(777)
nsamp <- 10^4
xx <- numeric(nsamp)
for (i in 1:nsamp) {
notdone <- T
while (notdone) {
u <- runif(1)
x <- ifelse( u < 1/2, sqrt(2*u) - 1, 1- sqrt(2*(1-u)))
y <- 2*g(x)*runif(1)
notdone <- (y > f(x))
}
xx[isamp] <-x
}
g(x) <- function(x) 1 - abs(x)
set.seed(777)
g <- function(x) 1 - abs(x)
set.seed(777)
nsamp <- 10^4
xx <- numeric(nsamp)
for (i in 1:nsamp) {
notdone <- T
while (notdone) {
u <- runif(1)
x <- ifelse( u < 1/2, sqrt(2*u) - 1, 1- sqrt(2*(1-u)))
y <- 2*g(x)*runif(1)
notdone <- (y > f(x))
}
xx[isamp] <-x
}
g <- function(x) 1 - abs(x)
f <- function(x) 2 * (1- abs(x)^(1/3))
set.seed(777)
nsamp <- 10^4
xx <- numeric(nsamp)
for (i in 1:nsamp) {
notdone <- T
while (notdone) {
u <- runif(1)
x <- ifelse( u < 1/2, sqrt(2*u) - 1, 1- sqrt(2*(1-u)))
y <- 2*g(x)*runif(1)
notdone <- (y > f(x))
}
xx[isamp] <-x
}
xx <- numeric(nsamp)
for (isamp in 1:nsamp) {
notdone <- T
while (notdone) {
u <- runif(1)
x <- ifelse( u < 1/2, sqrt(2*u) - 1, 1- sqrt(2*(1-u)))
y <- 2*g(x)*runif(1)
notdone <- (y > f(x))
}
xx[isamp] <-x
}
hist(xx, prob = T, ylim = c(0,2))
inverse_func(1)
inverse_func  <- function(x){
sol <- 0
if (x < 0) {
sol <- sqrt(2*x) - 1
}
else {
sol <- 1-sqrt(2*(1-x))
}
return(sol)
}
inverse_func(1)
rbeta(1, 2.5, 1)
rbeta(1, 2.5, 1)
rbeta(1, 2.5, 1)
rbeta(1, 2.5, 1)
rbeta(1, 2.5, 2)
rbeta(1, 2.5, 2)
rbeta(1, 2.5, 2)
rbeta(1, 2.5, 2)
library(tidyverse)
library(VCBART)
library(splines)
library(scales)
setwd("~/school/wisconsin/research_repo/decathlon/analysis")
source("../decathlon_funs.R")
data_dir = "../data/"
decathlon_data <- read_excel(paste(data_dir, "/Men_Decathlon_11_22_2021_LegalOnly.xlsx", sep = "")) %>%
wrangle_data() %>%
mutate(name = paste(first, last)) %>%
select(name, hundred_m, long_jump, shot_put, high_jump, four_hundred_m, hurdles, discus, pole_vault, javelin, fifteen_hundred_m, age, points) %>%
mutate(age = age / 365.25,
pole_vault = pole_vault / 100,
long_jump = long_jump / 100,
high_jump = high_jump / 100)
age_vec <- decathlon_data$age
sample_df <- data.frame(age = age_vec)
y_vars <-  c("hundred_m", "long_jump", "shot_put", "high_jump",
"four_hundred_m", "hurdles", "discus",
"pole_vault", "javelin", "fifteen_hundred_m")
data_long <- decathlon_data %>%
pivot_longer(cols = y_vars, names_to = "event", values_to = "score")
event_summary <- data_long %>%
group_by(event) %>%
summarize(mean_score = mean(score),
sd_score = sd(score))
mean_df <- event_summary %>%
select(event, mean_score) %>%
pivot_wider(names_from = event, values_from = mean_score)
sd_df <- event_summary %>%
select(event, sd_score) %>%
pivot_wider(names_from = event, values_from = sd_score)
data_standard <- decathlon_data %>%
mutate(hundred_m = (hundred_m - mean(hundred_m)) / sd(hundred_m),
long_jump = (long_jump - mean(long_jump)) / sd(long_jump),
shot_put = (shot_put - mean(shot_put)) / sd(shot_put),
high_jump = (high_jump - mean(high_jump)) / sd(high_jump),
four_hundred_m = (four_hundred_m - mean(four_hundred_m)) / sd(four_hundred_m),
hurdles = (hurdles - mean(hurdles)) / sd(hurdles),
discus = (discus - mean(discus)) / sd(discus),
pole_vault = (pole_vault - mean(pole_vault)) / sd(pole_vault),
javelin = (javelin - mean(javelin)) / sd(javelin),
fifteen_hundred_m = (fifteen_hundred_m - mean(fifteen_hundred_m)) / sd(fifteen_hundred_m)
)
# source("vcbart_wrapper.R")
M <- 50
R_cont <- ncol(Z_cont_train)
library(tidyverse)
library(VCBART)
library(splines)
library(scales)
setwd("~/school/wisconsin/research_repo/decathlon/analysis")
source("../decathlon_funs.R")
data_dir = "../data/"
decathlon_data <- read_excel(paste(data_dir, "/Men_Decathlon_11_22_2021_LegalOnly.xlsx", sep = "")) %>%
wrangle_data() %>%
mutate(name = paste(first, last)) %>%
select(name, hundred_m, long_jump, shot_put, high_jump, four_hundred_m, hurdles, discus, pole_vault, javelin, fifteen_hundred_m, age, points) %>%
mutate(age = age / 365.25,
pole_vault = pole_vault / 100,
long_jump = long_jump / 100,
high_jump = high_jump / 100)
age_vec <- decathlon_data$age
sample_df <- data.frame(age = age_vec)
y_vars <-  c("hundred_m", "long_jump", "shot_put", "high_jump",
"four_hundred_m", "hurdles", "discus",
"pole_vault", "javelin", "fifteen_hundred_m")
data_long <- decathlon_data %>%
pivot_longer(cols = y_vars, names_to = "event", values_to = "score")
event_summary <- data_long %>%
group_by(event) %>%
summarize(mean_score = mean(score),
sd_score = sd(score))
mean_df <- event_summary %>%
select(event, mean_score) %>%
pivot_wider(names_from = event, values_from = mean_score)
sd_df <- event_summary %>%
select(event, sd_score) %>%
pivot_wider(names_from = event, values_from = sd_score)
# standardizing data
data_standard <- decathlon_data %>%
mutate(hundred_m = (hundred_m - mean(hundred_m)) / sd(hundred_m),
long_jump = (long_jump - mean(long_jump)) / sd(long_jump),
shot_put = (shot_put - mean(shot_put)) / sd(shot_put),
high_jump = (high_jump - mean(high_jump)) / sd(high_jump),
four_hundred_m = (four_hundred_m - mean(four_hundred_m)) / sd(four_hundred_m),
hurdles = (hurdles - mean(hurdles)) / sd(hurdles),
discus = (discus - mean(discus)) / sd(discus),
pole_vault = (pole_vault - mean(pole_vault)) / sd(pole_vault),
javelin = (javelin - mean(javelin)) / sd(javelin),
fifteen_hundred_m = (fifteen_hundred_m - mean(fifteen_hundred_m)) / sd(fifteen_hundred_m)
)
###########
# source("vcbart_wrapper.R")
M <- 50
Y_train <- data_standard$long_jump
subj_id_train <- 1:nrow(data_standard) #double check this with sameer
N_train <- nrow(data_standard)
N_test <- 0
ni_train <- 1 #double check
X_train <- as.matrix(data_standard[,2:2])
for (i in 1:ncol(X_train)) {
X_train[,i] <- rescale(X_train[,i])
}
#replace second number with previous event. for hundred m, make an 1 matrix?
# X_train <- as.matrix(rep(1, nrow(data_standard)))
p <- ncol(X_train)
tau <- rep(0.5/sqrt(M), times = p+1)
Z_cont_train <- as.matrix( rescale(data_standard$age))
R_cat <- 0
R <- R_cont + R_cat
R_cont <- ncol(Z_cont_train)
R_cat <- 0
R <- R_cont + R_cat
?VCBART_ind
ni_train <- 1 #double check
X_train <- as.matrix(data_standard[,2:2])
for (i in 1:ncol(X_train)) {
X_train[,i] <- rescale(X_train[,i])
}
#replace second number with previous event. for hundred m, make an 1 matrix?
# X_train <- as.matrix(rep(1, nrow(data_standard)))
p <- ncol(X_train)
tau <- rep(0.5/sqrt(M), times = p+1)
Z_cont_train <- as.matrix( rescale(data_standard$age))
R_cont <- ncol(Z_cont_train)
R_cat <- 0
R <- R_cont + R_cat
View(X_train)
subj_id_train
ni_train <- rep(1, nrow(data_standard)) #double check
X_train <- as.matrix(data_standard[,2:2])
for (i in 1:ncol(X_train)) {
X_train[,i] <- rescale(X_train[,i])
}
#replace second number with previous event. for hundred m, make an 1 matrix?
# X_train <- as.matrix(rep(1, nrow(data_standard)))
p <- ncol(X_train)
tau <- rep(0.5/sqrt(M), times = p+1)
Z_cont_train <- as.matrix( rescale(data_standard$age))
R_cont <- ncol(Z_cont_train)
R_cat <- 0
R <- R_cont + R_cat
fit <- VCBART::VCBART_ind(Y_train = Y_train,
subj_id_train = subj_id_train,
ni_train = ni_train,
X_train = X_train,
Z_cont_train = Z_cont_train,
# X_test = X_test,
# Z_cont_test = Z_cont_test,
# unif_cuts = unif_cuts,
# cutpoints_list = cutpoints_list,
# cat_levels_list = cat_levels_list,
# sparse = sparse,
M = M,
# mu0 = mu0, tau = tau, nu = nu, lambda = lambda,
# nd = nd, burn = burn, thin = 1,
# save_samples = save_samples, save_trees = save_trees,
verbose = T)
View(fit)
X_train <- as.matrix(data_standard[,2:2])
#replace second number with previous event. for hundred m, make an 1 matrix?
# X_train <- as.matrix(rep(1, nrow(data_standard)))
p <- ncol(X_train)
tau <- rep(0.5/sqrt(M), times = p+1)
Z_cont_train <- as.matrix( rescale(data_standard$age))
R_cont <- ncol(Z_cont_train)
R_cat <- 0
R <- R_cont + R_cat
library(tidyverse)
library(VCBART)
library(splines)
library(scales)
setwd("~/school/wisconsin/research_repo/decathlon/analysis")
source("../decathlon_funs.R")
data_dir = "../data/"
decathlon_data <- read_excel(paste(data_dir, "/Men_Decathlon_11_22_2021_LegalOnly.xlsx", sep = "")) %>%
wrangle_data() %>%
mutate(name = paste(first, last)) %>%
select(name, hundred_m, long_jump, shot_put, high_jump, four_hundred_m, hurdles, discus, pole_vault, javelin, fifteen_hundred_m, age, points) %>%
mutate(age = age / 365.25,
pole_vault = pole_vault / 100,
long_jump = long_jump / 100,
high_jump = high_jump / 100)
age_vec <- decathlon_data$age
sample_df <- data.frame(age = age_vec)
y_vars <-  c("hundred_m", "long_jump", "shot_put", "high_jump",
"four_hundred_m", "hurdles", "discus",
"pole_vault", "javelin", "fifteen_hundred_m")
data_long <- decathlon_data %>%
pivot_longer(cols = y_vars, names_to = "event", values_to = "score")
event_summary <- data_long %>%
group_by(event) %>%
summarize(mean_score = mean(score),
sd_score = sd(score))
mean_df <- event_summary %>%
select(event, mean_score) %>%
pivot_wider(names_from = event, values_from = mean_score)
sd_df <- event_summary %>%
select(event, sd_score) %>%
pivot_wider(names_from = event, values_from = sd_score)
# standardizing data
data_standard <- decathlon_data %>%
mutate(hundred_m = (hundred_m - mean(hundred_m)) / sd(hundred_m),
long_jump = (long_jump - mean(long_jump)) / sd(long_jump),
shot_put = (shot_put - mean(shot_put)) / sd(shot_put),
high_jump = (high_jump - mean(high_jump)) / sd(high_jump),
four_hundred_m = (four_hundred_m - mean(four_hundred_m)) / sd(four_hundred_m),
hurdles = (hurdles - mean(hurdles)) / sd(hurdles),
discus = (discus - mean(discus)) / sd(discus),
pole_vault = (pole_vault - mean(pole_vault)) / sd(pole_vault),
javelin = (javelin - mean(javelin)) / sd(javelin),
fifteen_hundred_m = (fifteen_hundred_m - mean(fifteen_hundred_m)) / sd(fifteen_hundred_m)
)
###########
# source("vcbart_wrapper.R")
M <- 50
Y_train <- data_standard$long_jump
subj_id_train <- 1:nrow(data_standard) #double check this with sameer
N_train <- nrow(data_standard)
N_test <- 0
ni_train <- rep(1, nrow(data_standard)) #double check
X_train <- as.matrix(data_standard[,2:2])
#replace second number with previous event. for hundred m, make an 1 matrix?
# X_train <- as.matrix(rep(1, nrow(data_standard)))
p <- ncol(X_train)
tau <- rep(0.5/sqrt(M), times = p+1)
Z_cont_train <- as.matrix( rescale(data_standard$age))
fit <- VCBART::VCBART_ind(Y_train = Y_train,
subj_id_train = subj_id_train,
ni_train = ni_train,
X_train = X_train,
Z_cont_train = Z_cont_train,
M = M,
verbose = T)
#what to do for hundred m? use flex bart with only age
fit$yhat.train.mean
(fit$yhat.train.mean - Y_train)
(fit$yhat.train.mean - Y_train)^2
mean((fit$yhat.train.mean - Y_train)^2)
library(tidyverse)
library(VCBART)
library(splines)
library(scales)
setwd("~/school/wisconsin/research_repo/decathlon/analysis")
source("../decathlon_funs.R")
library(BART)
library(tidyverse)
library(Rcpp)
# library(obliqueBART)
setwd("~/school/wisconsin/BART/bart_playground/obliqueBART")
sourceCpp("src/obliqueBART_fit_lp.cpp")
sourceCpp("src/probit_obliqueBART_fit.cpp")
source("R/probit_obliqueBART.R")
#classification
load("~/school/wisconsin/BART/benchmark_datasets/classification/data/blood_transfusion_data.RData")
# train split
Y_train = Y[-test_split_list[[1]]]
X_cont_train = X_cont[-test_split_list[[1]], ]
# test split
Y_test = Y[test_split_list[[1]]]
X_cont_test = X_cont[test_split_list[[1]], ]
if (!is.null(cat_level_list)){
# some data sets only have one categorical variable
# but rffbart and flexbart require a matrix input
if ((ncol(X_cat) > 1)){
X_cat_train = X_cat[-test_split_list[[1]], ]
X_cat_test = X_cat[test_split_list[[1]], ]
} else if (nrow(X_cat) > 1) {
X_cat_train = matrix(X_cat[-test_split_list[[1]], ], ncol = 1)
X_cat_test = matrix(X_cat[test_split_list[[1]], ], ncol = 1)
} else if (nrow(X_cat == 1)){
X_cat_train = matrix(0L, nrow = 1, ncol = 1)
X_cat_test = matrix(0L, nrow = 1, ncol = 1)
}
} else {
X_cat_train = matrix(0L, nrow = 1, ncol = 1)
X_cat_test = matrix(0L, nrow = 1, ncol = 1)
}
cat_levels_list = NULL
prob_aa = 0
adaptive_prob_aa_option = FALSE
centering = TRUE
phi_option = 7
nd = 1000
burn = 1000
thin = 1
save_samples = TRUE
save_trees = FALSE
verbose = TRUE
print_every = floor((nd * thin + burn)/10)
n_chains = 4
fit <- probit_obliqueBART_lp(
Y_train = as.integer(Y_train),
X_cont_train = X_cont_train,
X_cat_train = X_cat_train,
cat_levels_list = cat_levels_list,
X_cont_test = X_cont_test,
X_cat_test = X_cat_test,
prob_aa = prob_aa,
adaptive_prob_aa_option = adaptive_prob_aa_option,
phi_option = phi_option,
centering = centering,
nd = nd, burn = burn, thin = thin,
save_samples = save_samples,
verbose = verbose, print_every = print_every
)
